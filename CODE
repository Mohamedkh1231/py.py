import tkinter as tk
import customtkinter as ctk
from tkinter import messagebox
from cryptography.fernet import Fernet
import os
import string
import random
import secrets
import logging
import time
from datetime import datetime, timedelta
import json

# Setup logging
logging.basicConfig(
    filename='password_manager.log',
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)


# Custom exceptions
class PasswordManagerError(Exception):
    """Base exception class for password manager"""
    pass


class AuthenticationError(PasswordManagerError):
    """Authentication related errors"""
    pass


class EncryptionError(PasswordManagerError):
    """Encryption related errors"""
    pass


class RateLimiter:
    def __init__(self, max_attempts=5, lockout_time=300):  # 5 attempts, 5 min lockout
        self.max_attempts = max_attempts
        self.lockout_time = lockout_time
        self.attempts = {}
        self.lockouts = {}

    def is_rate_limited(self, username):
        current_time = time.time()

        # Check if user is locked out
        if username in self.lockouts:
            if current_time - self.lockouts[username] < self.lockout_time:
                return True
            else:
                del self.lockouts[username]

        # Check attempt count
        if username in self.attempts:
            attempts = self.attempts[username]
            if len(attempts) >= self.max_attempts:
                recent_attempts = [t for t in attempts
                                   if current_time - t < self.lockout_time]
                if len(recent_attempts) >= self.max_attempts:
                    self.lockouts[username] = current_time
                    return True

        return False

    def record_attempt(self, username):
        current_time = time.time()
        if username not in self.attempts:
            self.attempts[username] = []
        self.attempts[username].append(current_time)


class SessionManager:
    def __init__(self, expiry_time=3600):  # 1 hour sessions
        self.sessions = {}
        self.expiry_time = expiry_time

    def create_session(self, username):
        session_id = secrets.token_urlsafe(32)
        self.sessions[session_id] = {
            'username': username,
            'created_at': time.time()
        }
        return session_id

    def validate_session(self, session_id):
        if session_id not in self.sessions:
            return False

        session = self.sessions[session_id]
        if time.time() - session['created_at'] > self.expiry_time:
            del self.sessions[session_id]
            return False

        return True

    def get_username(self, session_id):
        if self.validate_session(session_id):
            return self.sessions[session_id]['username']
        return None

    def end_session(self, session_id):
        if session_id in self.sessions:
            del self.sessions[session_id]


class AuthManager:
    def __init__(self):
        self.setup_encryption()
        self.rate_limiter = RateLimiter()
        self.reset_tokens = {}
        self.session_manager = SessionManager()

    def setup_encryption(self):
        """Initialize encryption for user authentication"""
        key_path = "auth_key.key"

        if not os.path.exists(key_path):
            key = Fernet.generate_key()
            with open(key_path, "wb") as key_file:
                os.chmod(key_path, 0o600)
                key_file.write(key)

        try:
            with open(key_path, "rb") as key_file:
                self.key = key_file.read()
                self.fernet = Fernet(self.key)
        except Exception as e:
            logging.error(f"Failed to setup encryption: {e}")
            raise EncryptionError(f"Encryption setup failed: {str(e)}")

    def validate_input(self, **kwargs):
        """Validate user input"""
        for key, value in kwargs.items():
            if not isinstance(value, str):
                return False, f"Invalid type for {key}"

            if "|" in value:  # Prevent delimiter injection
                return False, f"Invalid character | in {key}"

            if len(value) > 256:  # Reasonable length limit
                return False, f"{key} too long"

        return True, ""

    def validate_password_strength(self, password):
        """Validate password strength"""
        if len(password) < 12:
            return False, "Password must be at least 12 characters"

        if not any(c.isupper() for c in password):
            return False, "Password must contain uppercase letters"

        if not any(c.islower() for c in password):
            return False, "Password must contain lowercase letters"

        if not any(c.isdigit() for c in password):
            return False, "Password must contain numbers"

        if not any(c in string.punctuation for c in password):
            return False, "Password must contain special characters"

        return True, ""

    def register_user(self, username, email, password):
        """Register a new user"""
        try:
            # Validate input
            valid, msg = self.validate_input(username=username, email=email, password=password)
            if not valid:
                return False, msg

            # Validate password strength
            valid, msg = self.validate_password_strength(password)
            if not valid:
                return False, msg

            if self.user_exists(username):
                return False, "Username already exists"

            encrypted_password = self.fernet.encrypt(password.encode()).decode()

            with open("users.txt", "a") as f:
                os.chmod("users.txt", 0o600)
                f.write(f"{username}|{email}|{encrypted_password}\n")

            logging.info(f"User registered successfully: {username}")
            return True, "Registration successful"

        except Exception as e:
            logging.error(f"Registration failed: {str(e)}")
            raise AuthenticationError(f"Registration failed: {str(e)}")

    def validate_user(self, username, password):
        """Validate user credentials"""
        try:
            if self.rate_limiter.is_rate_limited(username):
                logging.warning(f"Rate limit exceeded for user: {username}")
                return False

            if not os.path.exists("users.txt"):
                return False

            with open("users.txt", "r") as f:
                for line in f:
                    stored_username, _, stored_password = line.strip().split("|")
                    if username == stored_username:
                        try:
                            decrypted_password = self.fernet.decrypt(
                                stored_password.encode()).decode()
                            if password == decrypted_password:
                                return True
                            else:
                                self.rate_limiter.record_attempt(username)
                                return False
                        except Exception:
                            return False

            return False

        except Exception as e:
            logging.error(f"User validation failed: {str(e)}")
            raise AuthenticationError(f"Authentication failed: {str(e)}")

    def user_exists(self, username):
        """Check if username already exists"""
        if not os.path.exists("users.txt"):
            return False

        with open("users.txt", "r") as f:
            for line in f:
                stored_username = line.strip().split("|")[0]
                if username == stored_username:
                    return True
        return False

    def generate_reset_token(self, username, expiry_minutes=30):
        """Generate secure password reset token"""
        if not self.user_exists(username):
            return None

        token = secrets.token_urlsafe(32)
        expiry = datetime.now() + timedelta(minutes=expiry_minutes)

        self.reset_tokens[token] = {
            'username': username,
            'expiry': expiry
        }

        return token

    def validate_reset_token(self, token):
        """Validate reset token"""
        if token not in self.reset_tokens:
            return False, "Invalid token"

        token_data = self.reset_tokens[token]
        if datetime.now() > token_data['expiry']:
            del self.reset_tokens[token]
            return False, "Token expired"

        return True, token_data['username']


class PasswordManager:
    def __init__(self):
        self.setup_encryption()
        self.setup_data_structures()

    def setup_encryption(self):
        """Initialize encryption key"""
        key_path = "encryption_key.key"

        if not os.path.exists(key_path):
            key = Fernet.generate_key()
            with open(key_path, "wb") as key_file:
                os.chmod(key_path, 0o600)
                key_file.write(key)

        try:
            with open(key_path, "rb") as key_file:
                self.key = key_file.read()
                self.fernet = Fernet(self.key)
        except Exception as e:
            logging.error(f"Failed to setup encryption: {e}")
            raise EncryptionError(f"Encryption setup failed: {str(e)}")

    def setup_data_structures(self):
        """Initialize data structures"""
        self.passwords = {}

    def encrypt_password(self, password):
        """Encrypt a password"""
        try:
            return self.fernet.encrypt(password.encode()).decode()
        except Exception as e:
            logging.error(f"Password encryption failed: {e}")
            raise EncryptionError(f"Encryption failed: {str(e)}")

    def decrypt_password(self, encrypted_password):
        """Decrypt a password"""
        try:
            return self.fernet.decrypt(encrypted_password.encode()).decode()
        except Exception as e:
            logging.error(f"Password decryption failed: {e}")
            raise EncryptionError(f"Decryption failed: {str(e)}")

    def save_password(self, username, website, password):
        """Save encrypted password"""
        try:
            encrypted_password = self.encrypt_password(password)
            if username not in self.passwords:
                self.passwords[username] = []

            # Check for existing entry
            for entry in self.passwords[username]:
                if entry['website'] == website:
                    entry['password'] = encrypted_password
                    entry['updated_at'] = datetime.now().isoformat()
                    break
            else:
                self.passwords[username].append({
                    'website': website,
                    'password': encrypted_password,
                    'created_at': datetime.now().isoformat(),
                    'updated_at': datetime.now().isoformat()
                })

            self.save_to_file(username)
            self.backup_data(username)
            logging.info(f"Password saved for user {username}, website {website}")

        except Exception as e:
            logging.error(f"Failed to save password: {e}")
            raise PasswordManagerError(f"Failed to save password: {str(e)}")

    def delete_password(self, username, website):
        """Delete a password entry"""
        try:
            if username in self.passwords:
                self.passwords[username] = [p for p in self.passwords[username]
                                            if p['website'] != website]
                self.save_to_file(username)
                self.backup_data(username)
                logging.info(f"Password deleted for user {username}, website {website}")
                return True
            return False

        except Exception as e:
            logging.error(f"Failed to delete password: {e}")
            raise PasswordManagerError(f"Failed to delete password: {str(e)}")

    def get_passwords(self, username):
        """Get all passwords for a user"""
        return self.passwords.get(username, [])

    def save_to_file(self, username):
        """Save passwords to file"""
        try:
            file_path = f"{username}_passwords.txt"
            with open(file_path, "w") as f:
                os.chmod(file_path, 0o600)
                if username in self.passwords:
                    for entry in self.passwords[username]:
                        f.write(f"{username}|{entry['website']}|{entry['password']}|"
                                f"{entry['created_at']}|{entry['updated_at']}\n")

        except Exception as e:
            logging.error(f"Failed to save to file: {e}")
            raise PasswordManagerError(f"Failed to save data: {str(e)}")

    def load_from_file(self, username):
        """Load passwords from file"""
        try:
            file_path = f"{username}_passwords.txt"
            if os.path.exists(file_path):
                self.passwords[username] = []
                with open(file_path, "r") as f:
                    for line in f:
                        try:
                            (user, website, password,
                             created_at, updated_at) = line.strip().split("|")
                            self.passwords[username].append({
                                'website': website,
                                'password': password,
                                'created_at': created_at,
                                'updated_at': updated_at
                            })
                        except ValueError:
                            continue

        except Exception as e:
            logging.error(f"Failed to load from file: {e}")
            raise PasswordManagerError(f"Failed to load data: {str(e)}")

    def backup_data(self, username):
        """Create encrypted backup of user data"""
        try:
            backup_dir = "backups"
            os.makedirs(backup_dir, exist_ok=True)

            backup_path = os.path.join(
                backup_dir,
                f"{username}{datetime.now().strftime('%Y%m%d%H%M%S')}.bak"
            )

            with open(f"{username}_passwords.txt", "rb") as source:
                with open(backup_path, "wb") as backup:
                    os.chmod(backup_path, 0o600)
                    backup.write(self.fernet.encrypt(source.read()))

            self.cleanup_old_backups(username)
            logging.info(f"Backup created for user {username}")

        except Exception as e:
            logging.error(f"Backup failed: {e}")
            raise PasswordManagerError(f"Backup failed: {str(e)}")

    def cleanup_old_backups(self, username, keep_last=5):
        """Keep only the specified number of most recent backups"""
        try:
            backup_dir = "backups"
            if not os.path.exists(backup_dir):
                return

            backups = [f for f in os.listdir(backup_dir)
                       if f.startswith(f"{username}_")]
            backups.sort(reverse=True)

            for old_backup in backups[keep_last:]:
                os.remove(os.path.join(backup_dir, old_backup))

        except Exception as e:
            logging.error(f"Cleanup of old backups failed: {e}")
            raise PasswordManagerError(f"Backup cleanup failed: {str(e)}")

    @staticmethod
    def generate_password(length=16):
        """Generate a strong password"""
        try:
            while True:
                characters = string.ascii_letters + string.digits + string.punctuation
                password = ''.join(secrets.choice(characters) for _ in range(length))

                # Ensure password meets complexity requirements
                if (any(c.islower() for c in password) and
                        any(c.isupper() for c in password) and
                        any(c.isdigit() for c in password) and
                        any(c in string.punctuation for c in password)):
                    return password

        except Exception as e:
            logging.error(f"Password generation failed: {e}")
            raise PasswordManagerError(f"Failed to generate password: {str(e)}")


class PasswordManagerGUI:
    def __init__(self):
        self.auth_manager = AuthManager()
        self.password_manager = PasswordManager()
        self.current_session = None
        self.setup_theme()
        self.setup_main_window()

    def setup_theme(self):
        """Setup dark theme with blue accent"""
        ctk.set_appearance_mode("dark")
        ctk.set_default_color_theme("blue")

    def setup_main_window(self):
        """Setup the main application window"""
        self.window = ctk.CTk()
        self.window.title("Secure Password Manager")
        self.window.geometry("1000x600")
        self.window.resizable(False, False)

        # Create main container
        self.main_container = ctk.CTkFrame(self.window)
        self.main_container.pack(pady=20, padx=40, fill="both", expand=True)

        # Setup the tabbed interface
        self.setup_tabs()

        self.window.mainloop()

    def setup_tabs(self):
        """Setup the tabbed interface"""
        # Header
        header = ctk.CTkLabel(self.main_container,
                              text="Secure Password Manager",
                              font=("Roboto", 24, "bold"))
        header.pack(pady=20)

        # Login frame
        self.login_frame = ctk.CTkFrame(self.main_container)
        self.setup_login_frame()

        # Register frame
        self.register_frame = ctk.CTkFrame(self.main_container)
        self.setup_register_frame()

        # Show login frame by default
        self.show_login_frame()

    def setup_login_frame(self):
        """Setup the login interface"""
        # Username
        self.login_username = ctk.CTkEntry(self.login_frame,
                                           placeholder_text="Username",
                                           width=300)
        self.login_username.pack(pady=10)

        # Password
        self.login_password = ctk.CTkEntry(self.login_frame,
                                           placeholder_text="Password",
                                           show="●",
                                           width=300)
        self.login_password.pack(pady=10)

        # Login button
        login_button = ctk.CTkButton(self.login_frame,
                                     text="Login",
                                     command=self.handle_login,
                                     width=200)
        login_button.pack(pady=10)

        # Register link
        register_link = ctk.CTkButton(self.login_frame,
                                      text="Don't have an account? Register",
                                      command=self.show_register_frame,
                                      fg_color="transparent",
                                      width=200)
        register_link.pack(pady=10)

        # Forgot password link
        forgot_password = ctk.CTkButton(self.login_frame,
                                        text="Forgot Password?",
                                        command=self.show_reset_password_dialog,
                                        fg_color="transparent",
                                        width=200)
        forgot_password.pack(pady=10)

    def setup_register_frame(self):
        """Setup the registration interface"""
        # Username
        self.reg_username = ctk.CTkEntry(self.register_frame,
                                         placeholder_text="Username",
                                         width=300)
        self.reg_username.pack(pady=10)

        # Email
        self.reg_email = ctk.CTkEntry(self.register_frame,
                                      placeholder_text="Email",
                                      width=300)
        self.reg_email.pack(pady=10)

        # Password
        self.reg_password = ctk.CTkEntry(self.register_frame,
                                         placeholder_text="Password",
                                         show="●",
                                         width=300)
        self.reg_password.pack(pady=10)

        # Confirm Password
        self.reg_confirm = ctk.CTkEntry(self.register_frame,
                                        placeholder_text="Confirm Password",
                                        show="●",
                                        width=300)
        self.reg_confirm.pack(pady=10)

        # Register button
        register_button = ctk.CTkButton(self.register_frame,
                                        text="Register",
                                        command=self.handle_register,
                                        width=200)
        register_button.pack(pady=10)

        # Login link
        login_link = ctk.CTkButton(self.register_frame,
                                   text="Already have an account? Login",
                                   command=self.show_login_frame,
                                   fg_color="transparent",
                                   width=200)
        login_link.pack(pady=10)

    def show_login_frame(self):
        """Show login frame"""
        self.register_frame.pack_forget()
        self.login_frame.pack(fill="both", expand=True, padx=20, pady=20)

    def show_register_frame(self):
        """Show registration frame"""
        self.login_frame.pack_forget()
        self.register_frame.pack(fill="both", expand=True, padx=20, pady=20)

    def handle_login(self):
        """Handle login attempt"""
        try:
            username = self.login_username.get()
            password = self.login_password.get()

            if self.auth_manager.validate_user(username, password):
                self.current_session = self.auth_manager.session_manager.create_session(username)
                self.main_container.destroy()
                self.show_password_manager(username)
                logging.info(f"User logged in: {username}")
            else:
                messagebox.showerror("Error", "Invalid credentials")

        except Exception as e:
            logging.error(f"Login failed: {e}")
            messagebox.showerror("Error", "Login failed. Please try again.")

    def handle_register(self):
        """Handle registration attempt"""
        try:
            username = self.reg_username.get()
            email = self.reg_email.get()
            password = self.reg_password.get()
            confirm = self.reg_confirm.get()

            if not all([username, email, password, confirm]):
                messagebox.showerror("Error", "Please fill all fields")
                return

            if password != confirm:
                messagebox.showerror("Error", "Passwords don't match")
                return

            success, message = self.auth_manager.register_user(username, email, password)
            if success:
                messagebox.showinfo("Success", message)
                self.show_login_frame()
                # Clear registration fields
                for entry in [self.reg_username, self.reg_email,
                              self.reg_password, self.reg_confirm]:
                    entry.delete(0, tk.END)
            else:
                messagebox.showerror("Error", message)

        except Exception as e:
            logging.error(f"Registration failed: {e}")
            messagebox.showerror("Error", "Registration failed. Please try again.")

    def show_password_manager(self, username):
        """Show the password manager interface"""
        if not self.auth_manager.session_manager.validate_session(self.current_session):
            messagebox.showerror("Error", "Session expired. Please login again.")
            self.logout()
            return

        try:
            self.password_manager.load_from_file(username)

            manager_container = ctk.CTkFrame(self.window)
            manager_container.pack(pady=20, padx=20, fill="both", expand=True)

            # Header with controls
            header = ctk.CTkFrame(manager_container)
            header.pack(fill="x", padx=10, pady=10)

            title = ctk.CTkLabel(header,
                                 text=f"Password Manager - {username}",
                                 font=("Roboto", 20, "bold"))
            title.pack(side="left", padx=10)

            # Logout button
            logout_button = ctk.CTkButton(header,
                                          text="Logout",
                                          command=self.logout,
                                          width=100)
            logout_button.pack(side="right", padx=5)

            add_button = ctk.CTkButton(header,
                                       text="Add Password",
                                       command=lambda: self.show_add_password_dialog(
                                           username, refresh_list))
            add_button.pack(side="right", padx=5)

            search_var = tk.StringVar()
            search_var.trace('w', lambda *args: self.filter_passwords(
                username, search_var.get(), password_list))

            search_entry = ctk.CTkEntry(header,
                                        placeholder_text="Search...",
                                        width=200,
                                        textvariable=search_var)
            search_entry.pack(side="right", padx=5)

            # Password list
            password_list = ctk.CTkScrollableFrame(manager_container)
            password_list.pack(fill="both", expand=True, padx=10, pady=10)

            def refresh_list():
                """Refresh the password list"""
                for widget in password_list.winfo_children():
                    widget.destroy()

                passwords = self.password_manager.get_passwords(username)
                for entry in passwords:
                    self.create_password_entry(username, entry, password_list, refresh_list)

            refresh_list()

        except Exception as e:
            logging.error(f"Failed to show password manager: {e}")
            messagebox.showerror("Error", "Failed to load password manager")
            self.logout()

    def create_password_entry(self, username, entry, container, refresh_callback):
        """Create a password entry widget"""
        try:
            frame = ctk.CTkFrame(container)
            frame.pack(fill="x", padx=5, pady=5)

            website_label = ctk.CTkLabel(frame,
                                         text=entry['website'],
                                         font=("Roboto", 14, "bold"))
            website_label.pack(side="left", padx=10)

            created_label = ctk.CTkLabel(frame,
                                         text=f"Created: {entry['created_at'][:10]}",
                                         font=("Roboto", 12))
            created_label.pack(side="left", padx=10)

            password = self.password_manager.decrypt_password(entry['password'])

            def copy_password():
                self.window.clipboard_clear()
                self.window.clipboard_append(password)
                self.window.clipboard_get()  # Ensure clipboard content is available
                messagebox.showinfo("Success", "Password copied to clipboard!")

            delete_button = ctk.CTkButton(frame,
                                          text="Delete",
                                          width=80,
                                          fg_color="red",
                                          command=lambda: self.delete_password(
                                              username, entry['website'], refresh_callback))
            delete_button.pack(side="right", padx=5)

            copy_button = ctk.CTkButton(frame,
                                        text="Copy",
                                        width=80,
                                        command=copy_password)
            copy_button.pack(side="right", padx=5)

            show_button = ctk.CTkButton(frame,
                                        text="Show",
                                        width=80,
                                        command=lambda: messagebox.showinfo(
                                            "Password", password))
            show_button.pack(side="right", padx=5)

        except Exception as e:
            logging.error(f"Failed to create password entry: {e}")
            messagebox.showerror("Error", "Failed to load password entry")

    def show_add_password_dialog(self, username, refresh_callback):
        """Show dialog for adding new password"""
        if not self.auth_manager.session_manager.validate_session(self.current_session):
            messagebox.showerror("Error", "Session expired. Please login again.")
            self.logout()
            return

        try:
            dialog = ctk.CTkToplevel(self.window)
            dialog.title("Add Password")
            dialog.geometry("400x300")
            dialog.transient(self.window)
            dialog.grab_set()

            frame = ctk.CTkFrame(dialog)
            frame.pack(pady=20, padx=20, fill="both", expand=True)

            website_entry = ctk.CTkEntry(frame,
                                         placeholder_text="Website",
                                         width=300)
            website_entry.pack(pady=10)

            password_entry = ctk.CTkEntry(frame,
                                          placeholder_text="Password",
                                          show="●",
                                          width=300)
            password_entry.pack(pady=10)

            def generate_password():
                password = self.password_manager.generate_password()
                password_entry.delete(0, tk.END)
                password_entry.insert(0, password)

            generate_button = ctk.CTkButton(frame,
                                            text="Generate Password",
                                            command=generate_password,
                                            width=200)
            generate_button.pack(pady=10)

            def save():
                website = website_entry.get()
                password = password_entry.get()

                if not website or not password:
                    messagebox.showerror("Error", "Please fill all fields")
                    return

                try:
                    self.password_manager.save_password(username, website, password)
                    refresh_callback()
                    dialog.destroy()
                    messagebox.showinfo("Success", "Password saved successfully!")
                except Exception as e:
                    logging.error(f"Failed to save password: {e}")
                    messagebox.showerror("Error", "Failed to save password")

            save_button = ctk.CTkButton(frame,
                                        text="Save",
                                        command=save,
                                        width=200)
            save_button.pack(pady=10)

        except Exception as e:
            logging.error(f"Failed to show add password dialog: {e}")
            messagebox.showerror("Error", "Failed to open add password dialog")

    def show_reset_password_dialog(self):
        """Show dialog for password reset"""
        try:
            dialog = ctk.CTkToplevel(self.window)
            dialog.title("Reset Password")
            dialog.geometry("400x200")
            dialog.transient(self.window)
            dialog.grab_set()

            frame = ctk.CTkFrame(dialog)
            frame.pack(pady=20, padx=20, fill="both", expand=True)

            username_entry = ctk.CTkEntry(frame,
                                          placeholder_text="Username",
                                          width=300)
            username_entry.pack(pady=10)

            def request_reset():
                username = username_entry.get()
                if not username:
                    messagebox.showerror("Error", "Please enter username")
                    return

                token = self.auth_manager.generate_reset_token(username)
                if token:
                    # In a real application, you would send this token via email
                    # For demonstration, we'll show it in a message
                    messagebox.showinfo("Reset Token",
                                        f"Reset token (would be sent via email): {token}")
                    self.show_password_reset_dialog(token)
                    dialog.destroy()
                else:
                    messagebox.showerror("Error", "Username not found")

            reset_button = ctk.CTkButton(frame,
                                         text="Request Reset",
                                         command=request_reset,
                                         width=200)
            reset_button.pack(pady=10)

        except Exception as e:
            logging.error(f"Failed to show reset password dialog: {e}")
            messagebox.showerror("Error", "Failed to open reset password dialog")

    def show_password_reset_dialog(self, token):
        """Show dialog for entering new password"""
        try:
            dialog = ctk.CTkToplevel(self.window)
            dialog.title("Enter New Password")
            dialog.geometry("400x300")
            dialog.transient(self.window)
            dialog.grab_set()

            frame = ctk.CTkFrame(dialog)
            frame.pack(pady=20, padx=20, fill="both", expand=True)

            token_entry = ctk.CTkEntry(frame,
                                       placeholder_text="Reset Token",
                                       width=300)
            token_entry.pack(pady=10)
            token_entry.insert(0, token)

            new_password = ctk.CTkEntry(frame,
                                        placeholder_text="New Password",
                                        show="●",
                                        width=300)
            new_password.pack(pady=10)

            confirm_password = ctk.CTkEntry(frame,
                                            placeholder_text="Confirm Password",
                                            show="●",
                                            width=300)
            confirm_password.pack(pady=10)

            def reset_password():
                if new_password.get() != confirm_password.get():
                    messagebox.showerror("Error", "Passwords don't match")
                    return

                valid, username = self.auth_manager.validate_reset_token(token_entry.get())
                if valid:
                    # Update password logic would go here
                    # For demonstration, show success message
                    messagebox.showinfo("Success", "Password reset successfully")
                    dialog.destroy()
                else:
                    messagebox.showerror("Error", username)  # Error message

            reset_button = ctk.CTkButton(frame,
                                         text="Reset Password",
                                         command=reset_password,
                                         width=200)
            reset_button.pack(pady=10)

        except Exception as e:
            logging.error(f"Failed to show password reset dialog: {e}")
            messagebox.showerror("Error", "Failed to open password reset dialog")

    def delete_password(self, username, website, refresh_callback):
        """Delete a password entry"""
        if not self.auth_manager.session_manager.validate_session(self.current_session):
            messagebox.showerror("Error", "Session expired. Please login again.")
            self.logout()
            return

        try:
            if messagebox.askyesno("Confirm", "Are you sure you want to delete this password?"):
                if self.password_manager.delete_password(username, website):
                    refresh_callback()
                    messagebox.showinfo("Success", "Password deleted successfully!")
                else:
                    messagebox.showerror("Error", "Failed to delete password")

        except Exception as e:
            logging.error(f"Failed to delete password: {e}")
            messagebox.showerror("Error", "Failed to delete password")

    def filter_passwords(self, username, search_text, container):
        """Filter passwords based on search text"""
        if not self.auth_manager.session_manager.validate_session(self.current_session):
            messagebox.showerror("Error", "Session expired. Please login again.")
            self.logout()
            return

        try:
            for widget in container.winfo_children():
                widget.destroy()

            search_text = search_text.lower()
            passwords = self.password_manager.get_passwords(username)

            filtered_passwords = [
                entry for entry in passwords
                if search_text in entry['website'].lower()
            ]

            for entry in filtered_passwords:
                self.create_password_entry(username, entry, container,
                                           lambda: self.filter_passwords(username,
                                                                         search_text,
                                                                         container))

        except Exception as e:
            logging.error(f"Failed to filter passwords: {e}")
            messagebox.showerror("Error", "Failed to filter passwords")

    def logout(self):
        """Handle user logout"""
        try:
            if self.current_session:
                self.auth_manager.session_manager.end_session(self.current_session)
                self.current_session = None

            # Destroy current window and create new instance
            self.window.destroy()
            self._init_()

        except Exception as e:
            logging.error(f"Logout failed: {e}")
            messagebox.showerror("Error", "Logout failed")
            # Force application restart
            self.window.destroy()


def main():
    """Main application entry point"""
    try:
        # Ensure required directories exist
        os.makedirs("backups", exist_ok=True)

        # Set up logging
        logging.basicConfig(
            filename='password_manager.log',
            level=logging.INFO,
            format='%(asctime)s - %(levelname)s - %(message)s'
        )

        # Start the application
        app = PasswordManagerGUI()

    except Exception as e:
        logging.critical(f"Application failed to start: {e}")
        messagebox.showerror("Critical Error",
                             "Application failed to start. Please check the logs.")
        raise


if __name__ == "__main__":
    main()
